---
title: Real Estates
date: today
format:
    dashboard:
        orientation: rows
        scrolling: true
server: shiny
---

# Overview

```{python}
#| context: setup
#| output: false

import polars as pl
from shiny import render, ui
from dotenv import load_dotenv
import os
import s3fs

load_dotenv()
```

```{python}
#| context: setup
#| output: false

from io import BytesIO
from pathlib import Path

DATA_DIR_PATH = os.getenv("DATA_DIR_PATH")
assert DATA_DIR_PATH is not None

fs = s3fs.S3FileSystem(anon=False)
files = fs.ls(DATA_DIR_PATH)

data = []
for path in files:
    with fs.open(path) as file:
        new_data = pl.read_ndjson(BytesIO(file.read()))

        data.append(new_data)

data = (
    pl.concat(data, how="diagonal")
    .filter(pl.col("dt").is_not_null())
    .with_columns(pl.col("url").count().over("url").alias("seen_count"))
)
```

```{python}
from shiny import render

@render.data_frame
def penguins_df():
    return render.DataTable(data.select(
        pl.col("dt").alias("Last Seen"),
        pl.col("location").struct.field("address").alias("Address"),
        pl.col("price").alias("Price"),
        ((pl.col("travel").list[0].struct.field("duration").alias("duration_1") * pl.col("travel").list[1].struct.field("duration").alias("duration_2")) ** (1 / 2)).cast(pl.Int64).alias("Travel"),
        (pl.col("location").struct.field("floor_level").cast(pl.String) + " / " + pl.col("location").struct.field("total_floor_levels").cast(pl.String)).alias("Level"),
        pl.col("layout").alias("Layout"),
        pl.col("size").struct.field("floor_area").alias("Floor"),
        (pl.col("size").struct.field("balcony_area") + pl.col("size").struct.field("loggia_area")).cast(pl.Int64).cast(pl.String).alias("Balcony*"),
        (pl.col("size").struct.field("cellar_area") + pl.col("size").struct.field("pantry_area")).cast(pl.Int64).cast(pl.String).alias("Cellar*"),
        pl.col("url").alias("Url"),
        pl.col("seen_count").alias("Seen Count"),
    ), row_selection_mode="none", width="100%", filters=True)  
```

# Details

## {.sidebar}

```{python}
#| context: setup
#| output: false
cdata = (
    data
    .select(
        pl.col("location").struct.field("address"),
        pl.col("price"),
        # travel
        pl.col("travel").list[0].struct.field("duration").alias("duration_1"),
        pl.col("travel").list[1].struct.field("duration").alias("duration_2"),
        # level
        pl.col("location").struct.field("floor_level"),
        pl.col("location").struct.field("total_floor_levels"),
        # size
        pl.col("layout"),
        pl.col("size").struct.field("floor_area"),
        pl.col("size").struct.field("balcony_area"),
        pl.col("size").struct.field("loggia_area"),
        # state
        pl.col("state").struct.field("built_year"),
        pl.col("state").struct.field("reconstructed_year"),
        pl.col("monthly_fees"),
        pl.col("url"),
    )
    .sort(by="duration_1", descending=False)
)
```

```{python}
ui.input_select("address", "Address:",
                choices=cdata["address"].to_list())
```

## Column {.flow}

### Row

```{python}
@render.ui
def price():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    try:
        price = int(row["price"])
    except:
        price = "NA"
    return ui.value_box("Price (Kƒç)", "{:,}".format(price).replace(',', ' '))
```

```{python}
@render.ui
def area():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    try:
        floor_area = int(row["floor_area"])
    except:
        floor_area = "NA"
    return ui.value_box("Area (m2)", floor_area)
```

```{python}
@render.ui
def layout():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    layout = row["layout"]
    return ui.value_box("Layout", layout)
```

```{python}
@render.ui
def floor_level():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(
            pl.col("location").struct.field("floor_level"),
            pl.col("location").struct.field("total_floor_levels")
        )
        .to_pandas()
        .iloc[0]
    )
    try:
        floor_level = int(row["floor_level"])
    except:
        floor_level = "NA"
    try:
        total_floor_levels = int(row["total_floor_levels"])
    except:
        total_floor_levels = "NA"
    return ui.value_box("Floor Level", f"{floor_level} / {total_floor_levels}")
```

### Row

```{python}
@render.ui
def duration_1():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(pl.col("travel").list[0].struct.field("duration").alias("duration"), pl.col("travel").list[0].struct.field("to_address").alias("address"))
        .to_pandas()
        .iloc[0]
    )
    address = row["address"]
    try:
        duration = int(row["duration"])
    except:
        duration = "NA"
    return ui.value_box(f"Travel Time ({address})", duration)
```

```{python}
@render.ui
def duration_2():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(pl.col("travel").list[1].struct.field("duration").alias("duration"), pl.col("travel").list[1].struct.field("to_address").alias("address"))
        .to_pandas()
        .iloc[0]
    )
    address = row["address"]
    try:
        duration = int(row["duration"])
    except:
        duration = "NA"
    return ui.value_box(f"Travel Time ({address})", duration)
```

### Row

```{python}
@render.ui
def area_2():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    try:
        area = int(row["floor_area"])
    except:
        area = "NA"
    return ui.value_box("Floor Area (m2)", area)
```

```{python}
@render.ui
def balcony_loggia_area():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    try:
        balcony = int(row["balcony_area"])
    except:
        balcony = 0
    try:
        loggia = int(row["loggia_area"])
    except:
        loggia = 0
    return ui.value_box("Balcony / Loggia (m2)", balcony + loggia)
```

```{python}
@render.ui
def cellar_pantry():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(pl.col("size").struct.field("cellar_area").alias("cellar_area"), pl.col("size").struct.field("pantry_area").alias("pantry_area"))
        .to_pandas()
        .iloc[0]
    )
    
    try:
        pantry = int(row["pantry_area"])
    except:
        pantry = 0
    
    try:
        cellar = int(row["cellar_area"])
    except:
        cellar = 0

    return ui.value_box("Cellar / Pantry (m2)", cellar + pantry)
```

### Row

```{python}
@render.ui
def built_year():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(pl.col("state").struct.field("built_year"))
        .to_pandas()
        .iloc[0]
    )
    try:
        built_year = int(row["built_year"])
    except:
        built_year = "NA"
    return ui.value_box("Built (Year)", built_year)
```

```{python}
@render.ui
def reconstructed_year():
    row = (
        data.filter(pl.col("location").struct.field("address") == input.address())
        .select(pl.col("state").struct.field("reconstructed_year"))
        .to_pandas()
        .iloc[0]
    )
    try:
        reconstructed_year = int(row["reconstructed_year"])
    except:
        reconstructed_year = "NA"
    return ui.value_box("Reconstructed (Year)", reconstructed_year)
```

### Row

```{python}
#| title: Url
@render.ui
def url():
    row = cdata.filter(pl.col("address") == input.address()).to_pandas().iloc[0]
    url = row["url"]
    return url
```

```{python}
#| title: Seen Count (url)
@render.ui
def seen_count():
    row = data.filter(pl.col("location").struct.field("address") == input.address()).to_pandas().iloc[0]
    seen_count = row["seen_count"]
    return str(seen_count)
```
